ERR_INST_MEDIA=1
ERR_INV_INPUT=2
ERR_USR_PART_ABRT=3
ERR_UPGRADE_ABORT=4

handle_install_error()
{
	echo -n "ANDROID-IA installation failed. "

	case $1 in
	$ERR_INST_MEDIA)
		echo "Failed to find installation media !!"
		;;
	$ERR_INV_INPUT)
		echo "User failed to give valid input !!"
		;;
	$ERR_USR_PART_ABRT)
		echo "User aborted partitioning !!"
		;;
	$ERR_UPGRADE_ABORT)
		echo "User aborted upgrade !!"
		;;
	esac

	echo -n "Press ENTER to run live version."
	read

	return 255
}

device=
boot=
system=
select_device()
{
	# Select the install device
	retry=3;
	devlist=`ls /sys/block | grep -v -E "loop|ram|sr|boot"`

	while [ $retry -gt 0 ]; do
		i=0
		list=
		for d in $devlist; do
			if [ $ROOT == $d ]; then
				continue
			fi

			if [ -n "$CI_BUILD" ]; then
				# Select the first device found
				device=$d
				return
			fi

			i=$(( i + 1 ))
			echo $i. $d
			list="$list$d "
		done

		if [ $i -eq 0 ];then
			return $ERR_INST_MEDIA
		fi

		retry=$(( retry - 1 ))
		echo -n "Select the device to install: "
		read ans
		if [ $ans -gt 0 -a $ans -le $i ]; then
			device=`echo $list | cut -d" " -f$ans`
			if [ "$device" == "$SYSTEM" ]; then
				echo -n "Already found android-ia installed on $SYSTEM. Upgrade ? (y/n) :"
				read upg
				if [ $upg != "y" ]; then
					return $ERR_UPGRADE_ABORT
				fi
			fi
			return 0
		else
			echo "Input is not a valid number"; echo
		fi
	done

	return $ERR_INV_INPUT
}

prepare_partition()
{
	if [ -z "$CI_BUILD" ]; then
		echo -n "Auto partitioning /dev/$device. All data will be lost. Continue (y/[n]): "
		read ans
		if [ "$ans" != "y" ]; then
			return $ERR_USR_PART_ABRT
		fi

		echo -n "Are you sure (y/[n]): "
		read ans
		if [ "$ans" != "y" ]; then
			return $ERR_USR_PART_ABRT
		fi
	fi

	# unmount if already mounted
	mntpt=`mount | grep /dev/$device | cut -d" " -f3`
	if [ "$mntpt" != "" ]; then
		for m in $mntpt; do
			umount $m
		done
	fi

	dd if=/dev/zero of=/dev/$device bs=512 count=2048

	# Parse the gpt.ini file and create partitions
	gpt_file="gpt.androidia_64.ini"
	section=$(gpt_parse_section $gpt_file base)
	partitions=$(gpt_get_section_field "$section" partitions)
	num=0
	start=2048

	# Clear the partition table and recompute CHS
	sgdisk -oC /dev/$device 2> /dev/null

	for part in $partitions
	do
		num=$(( num + 1 ))
		section=$(gpt_parse_section $gpt_file "partition.$part")
		part_len=$(gpt_get_section_field "$section" "len")
		part_label=$(gpt_get_section_field "$section" "label")
		part_type=$(gpt_get_section_field "$section" "type")

		echo "Creating $part_label:$part_len MB:$part_type"

		end=$(( start + 1024 * 1024 * part_len / 512 ))

		if [ "$part" == "data" ]; then
			sgdisk -n $num:$start: /dev/$device 1> /dev/null
		else
			sgdisk -n $num:$start:$end /dev/$device 1> /dev/null
		fi

		if [ $? -gt 0 ]; then
			exit 1
		fi

		sgdisk -c $num:$part_label /dev/$device 1> /dev/null

		start=$(( end + 1 ))

		if [ $part == "system" ]; then
			syspartno=$num
		elif [ $part == "data" ]; then
			datapartno=$num
		elif [ $part == "cache" ]; then
			cachepartno=$num
		elif [ $part == "bootloader" ]; then
			bootpartno=$num
			sgdisk -t $num:ef00 /dev/$device
		fi
	done

	sgdisk -p /dev/$device

	ismmc=`echo $device | grep mmcblk`
	if [ -n "$ismmc" ]; then
		boot=/dev/"$device"p$bootpartno
		system=/dev/"$device"p$syspartno
		data=/dev/"$device"p$datapartno
		cache=/dev/"$device"p$cachepartno
	else
		boot=/dev/"$device"$bootpartno
		system=/dev/"$device"$syspartno
		data=/dev/"$device"$datapartno
		cache=/dev/"$device"$cachepartno
	fi

	# Format the partitions
	mkfs.fat -n EFI $boot
	yes | mkfs.ext4 -L Android-IA $system
	yes | mkfs.ext4 -L DATA $data
	yes | mkfs.ext4 -L CACHE $cache
}

show_progress()
{
	pid=$1
	scnt=$2
	dir=$3

	echo "Installing system image."

	while [ -d "/proc/$pid" ]; do
		dcnt=`find $dir | wc -l`
		per=$(( $(( $dcnt / $scnt)) * 100 ))
		echo -n "#"
		sleep 1
	done

	echo " ... Done."
}

do_actual_install()
{
	# Install GRUB2
	echo -n "Installing grub2 ... "
	mount $boot /scratchpad
	cp -dprf /mnt/boot /mnt/efi /mnt/kernel /mnt/initrd.img /mnt/ramdisk.img /scratchpad

	# update the fstab if we have boot device other than mmcblk
	# we have to do this in ext4 partition to preserve links
	ismmc=`echo $device | grep mmcblk`
	if [ -z "$ismmc" ]; then
		mkdir /tmp/extra
		mount $system /tmp/extra

		cd /tmp/extra
		mkdir ramdisk; cd ramdisk
		zcat /scratchpad/ramdisk.img | cpio -i
		rm /scratchpad/ramdisk.img

		# update the fstab which assumed mmc device by default
		sed -i "s/mmcblk[1-9]p/$device/g" fstab.androidia_64

		find . | cpio -o -Hnewc | gzip > /scratchpad/ramdisk.img
		cd ..; rm -rf ramdisk
		cd /newroot
		umount /tmp/extra
	fi

	# update grub entries
	cat /proc/cmdline > .file
	sed -i 's/INSTALL=1//; s/LIVE=1//' .file
	cmdline=`cat .file`; rm .file

	echo "set timeout=10" > /scratchpad/boot/grub/grub.cfg

	echo "menuentry 'Android-IA Boot ($1)' --class android-ia {" >> /scratchpad/boot/grub/grub.cfg
	echo "linux /kernel $cmdline quiet" >> /scratchpad/boot/grub/grub.cfg
	echo "initrd /initrd.img" >> /scratchpad/boot/grub/grub.cfg
	echo "}" >> /scratchpad/boot/grub/grub.cfg

	echo "" >> /scratchpad/boot/grub/grub.cfg

	echo "menuentry 'Android-IA Boot ($1) (w/ Serial)' --class android-ia {" >> /scratchpad/boot/grub/grub.cfg
	echo "linux /kernel $cmdline ignore_loglevel debug console=tty0 console=ttyS0,115200n8" >> /scratchpad/boot/grub/grub.cfg
	echo "initrd /initrd.img" >> /scratchpad/boot/grub/grub.cfg
	echo "}" >> /scratchpad/boot/grub/grub.cfg

	sync
	umount /scratchpad
	echo "Done."


	# Install Android System
	mount $system /scratchpad
	fcnt=`find /newroot/system | wc -l`
	cp -dprf /newroot/system/* /scratchpad &

	show_progress $! $fcnt /scratchpad

	echo -n "Syncing ... "
	sync
	echo "Done."

	umount /scratchpad
}

do_install()
{
	select_device || handle_install_error $? || return $?

	prepare_partition $device || handle_install_error $? || return $?

	do_actual_install $1 || handle_install_error $? || return $?
}
